<?xml version="1.0" encoding="UTF-8"?>
<WebLink xmlns="http://soap.sforce.com/2006/04/metadata">
    <fullName>QuoteMaker</fullName>
    <availability>online</availability>
    <displayType>button</displayType>
    <linkType>javascript</linkType>
    <masterLabel>QuoteMaker</masterLabel>
    <openType>onClickJavaScript</openType>
    <protected>false</protected>
    <url>{!REQUIRESCRIPT(&quot;/soap/ajax/30.0/connection.js&quot;)}  

     {!REQUIRESCRIPT(&quot;/soap/ajax/30.0/apex.js&quot;)}  

export function onInit(lines) {
    if (lines != null) {
        lines.forEach(function (line) {
            line.record[&quot;Actual_Total__c&quot;] = 0;
        });
    }
};
 
export function onAfterCalculate(quoteModel, quoteLines) {
    if (quoteLines != null) {
        quoteLines.forEach(function (line) {
            var parent = line.parentItem;
            if (parent != null) {
                var pComponentCustomTotal = parent.record[&quot;Actual_Total__c&quot;] || 0;
                var cListPrice = line.ProratedListPrice__c || 0;
                var cDaysProject = line.Days_Required__c   || 0;
                var cQuantity = line.Quantity__c == null ? 1 : line.Quantity__c;
                var cPriorQuantity = line.PriorQuantity__c || 0;
                var cPricingMethod = line.PricingMethod__c == null ? &quot;List&quot; : line.PricingMethod__c;
                var cDiscountScheduleType = line.DiscountScheduleType__c || &apos;&apos;;
                var cRenewal = line.Renewal__c || false;
                var cExisting = line.Existing__c || false;
                var cSubscriptionPricing = line.SubscriptionPricing__c || &apos;&apos;;
 
                var cTotalPrice = getTotal(cListPrice, cQuantity, cPriorQuantity, cPricingMethod, cDiscountScheduleType, cRenewal, cExisting, cSubscriptionPricing, cListPrice);
                pComponentCustomTotal += cTotalPrice;
 
                parent.record[&quot;Actual_Total__c&quot;] = pComponentCustomTotal;
            }
        });
    }
};
 
function getTotal(price, qty, priorQty, pMethod, dsType, isRen, isExist, subPricing, listPrice) {
    if ((isRen === true) &amp;&amp; (isExist === false) &amp;&amp; (priorQty == null)) {
        // Personal note: In onAfterCalculate, we specifically make sure that priorQuantity can&apos;t be null.
        // So isn&apos;t this loop pointless?
        return 0;
    } else {
        return price * getEffectiveQuantity(qty, priorQty, pMethod, dsType, isRen, isExist, subPricing, listPrice);
    }
}
 
function getEffectiveQuantity(qty, priorQty, pMethod, dsType, isRen, exists, subPricing, listPrice) {
    var delta = qty - priorQty;
 
    if (pMethod == &apos;Block&apos; &amp;&amp; delta == 0) {
        return 0;
    } else if (pMethod == &apos;Block&apos;) {
        return 1;
    } else if (dsType == &apos;Slab&apos; &amp;&amp; (delta == 0 || (qty == 0 &amp;&amp; isRen == true))) {
        return 0;
    } else if (dsType == &apos;Slab&apos;) {
        return 1;
    } else if (exists == true &amp;&amp; subPricing == &apos;&apos; &amp;&amp; delta &lt; 0) {
        return 0;
    } else if (exists == true &amp;&amp; subPricing == &apos;Percent Of Total&apos; &amp;&amp; listPrice != 0 &amp;&amp; delta &gt;= 0) {
        return qty;
    } else if (exists == true) {
        return delta;
    } else {
        return qty;
    }
}</url>
</WebLink>
